<!-- CSS Loader with Multiple Fallback Methods -->

<!-- Method 1: Direct inline styles for critical CSS (always works) -->
<style>
/* Global Styles */
:root {
    --ios-primary: #007aff;
    --ios-primary-dark: #0056b3;
    --ios-primary-light: #47a3ff;
    --ios-secondary: #5ac8fa;
    --ios-success: #4cd964;
    --ios-warning: #ff9500;
    --ios-danger: #ff3b30;
    --ios-gray-1: #8e8e93;
    --ios-gray-2: #aeaeb2;
    --ios-gray-3: #c7c7cc;
    --ios-gray-4: #d1d1d6;
    --ios-gray-5: #e5e5ea;
    --ios-gray-6: #f2f2f7;
    --ios-text: #000000;
    --ios-text-secondary: #3c3c43;
    --ios-background: rgba(255, 255, 255, 0.85);
    --ios-card-bg: rgba(255, 255, 255, 0.85);
    --ios-shadow: rgba(0, 0, 0, 0.15);
    --ios-backdrop-blur: 10px;
    --ios-border-radius: 12px;
    --ios-transition: 0.3s cubic-bezier(0.25, 0.1, 0.25, 1);
    --ios-dark-background: rgba(28, 28, 30, 0.85);
    --ios-dark-card-bg: rgba(44, 44, 46, 0.9);
    --ios-dark-text: #ffffff;
    --ios-dark-text-secondary: rgba(255, 255, 255, 0.8);
    --ios-dark-shadow: rgba(0, 0, 0, 0.35);
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    font-family: -apple-system, BlinkMacSystemFont, "San Francisco", "Helvetica Neue", Helvetica, Arial, sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
}

body {
    color: var(--ios-text);
    min-height: 100vh;
    width: 100%;
    position: relative;
    overflow-x: hidden;
    background-color: #0f172a;
}

.spline-container {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -1;
    overflow: hidden;
    opacity: 1;
    filter: brightness(1) contrast(1.1) saturate(1.2);
    transition: opacity 0.5s ease;
}

.gradient-bg {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: -2;
    background: linear-gradient(125deg, #0a2463, #3e92cc, #2a628f, #3e92cc);
    background-size: 400% 400%;
    animation: gradientBG 15s ease infinite;
    opacity: 0.3;
    transition: opacity 0.5s ease, z-index 0.1s;
    pointer-events: none;
}

/* Animations */
@keyframes gradientBG {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
}

@keyframes pulse {
    0% { transform: scale(1); opacity: 1; }
    100% { transform: scale(1.5); opacity: 0; }
}

/* Auth Components */
.ios-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    min-height: 100vh;
    padding: 2rem;
    position: relative;
    z-index: 1;
}

.ios-card {
    background: var(--ios-card-bg);
    backdrop-filter: blur(var(--ios-backdrop-blur));
    -webkit-backdrop-filter: blur(var(--ios-backdrop-blur));
    border-radius: var(--ios-border-radius);
    padding: 2rem;
    width: 100%;
    max-width: 420px;
    box-shadow: 0 4px 24px var(--ios-shadow);
    transition: var(--ios-transition);
    position: relative;
    overflow: hidden;
}

.ios-form-control {
    width: 100%;
    padding: 0.75rem 1rem;
    font-size: 1rem;
    border-radius: 10px;
    border: 1px solid var(--ios-gray-4);
    background-color: rgba(255, 255, 255, 0.8);
    color: var(--ios-text);
    transition: var(--ios-transition);
}

.ios-btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem 1.5rem;
    font-size: 1rem;
    font-weight: 500;
    border-radius: 10px;
    border: none;
    cursor: pointer;
    transition: var(--ios-transition);
    text-decoration: none;
}

.ios-btn-primary {
    background-color: var(--ios-primary);
    color: white;
}

/* Dashboard Components */
.sidebar {
    width: 240px;
    background-color: rgba(15, 23, 42, 0.6);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border-right: 1px solid rgba(255, 255, 255, 0.1);
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
}

.room-item {
    display: flex;
    align-items: center;
    padding: 1rem;
    border-radius: 12px;
    margin-bottom: 0.75rem;
    background-color: rgba(30, 41, 59, 0.7);
    transition: all 0.2s;
}

/* Chat Components */
.chat-messages {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1rem;
    height: 100%;
    overflow-y: auto;
    flex: 1;
    padding-right: 5px;
    scrollbar-width: thin;
}

.chat-message {
    display: flex;
    margin-bottom: 1rem;
}

.chat-avatar {
    width: 36px;
    height: 36px;
    border-radius: 50%;
    margin-right: 0.75rem;
    flex-shrink: 0;
    overflow: hidden;
}

.chat-content {
    flex: 1;
}

.chat-text {
    color: rgba(255, 255, 255, 0.9);
}
</style>

<!-- Method 2: Attempt to load external CSS -->
<link rel="stylesheet" href="/css/ios-style.css">

<!-- Method 3: Dynamic CSS loading with JavaScript fallback -->
<script>
// Check if the main stylesheet loaded successfully
window.addEventListener('load', function() {
    // Function to check if a stylesheet loaded
    function isStylesheetLoaded(href) {
        for (let i = 0; i < document.styleSheets.length; i++) {
            try {
                if (document.styleSheets[i].href && document.styleSheets[i].href.includes(href)) {
                    // Try to access rules to see if the stylesheet loaded properly
                    let rules = document.styleSheets[i].cssRules;
                    return true;
                }
            } catch (e) {
                // CORS error or stylesheet didn't load properly
                return false;
            }
        }
        return false;
    }

    // If ios-style.css didn't load, fetch it directly and inject it
    if (!isStylesheetLoaded('ios-style.css')) {
        console.log('Primary CSS failed to load. Attempting fallback method...');
        fetch('/css/ios-style.css')
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.text();
            })
            .then(css => {
                // Create a new style element with the fetched CSS
                const style = document.createElement('style');
                style.textContent = css;
                document.head.appendChild(style);
                console.log('CSS loaded via fetch fallback');
            })
            .catch(error => {
                console.error('Failed to load CSS via fetch:', error);
                // Final fallback - load from CDN
                const cssUrl = 'https://raw.githubusercontent.com/jayashish05/Code-Collab-Beta-v1/main/public/css/ios-style.css';
                const link = document.createElement('link');
                link.rel = 'stylesheet';
                link.href = cssUrl;
                document.head.appendChild(link);
                console.log('Attempting to load CSS from GitHub');
            });
    }
});
</script>
